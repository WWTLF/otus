// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This is simple client API\n",
    "title": "User Service",
    "contact": {
      "email": "schetinnikov@gmail.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "description": "Active health check status",
        "tags": [
          "healthcheck"
        ],
        "summary": "health check",
        "operationId": "health check",
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/HealthCheckStatus"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the user",
        "tags": [
          "user"
        ],
        "operationId": "find user by id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update user with User ID supplied",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "deletes a single user based on the ID supplied",
        "tags": [
          "user"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "user deleted"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "HealthCheckStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "maxLength": 256
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string",
          "maxLength": 256
        },
        "phone": {
          "type": "string",
          "format": "phone"
        },
        "username": {
          "type": "string",
          "maxLength": 256
        }
      }
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "user"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This is simple client API\n",
    "title": "User Service",
    "contact": {
      "email": "schetinnikov@gmail.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "description": "Active health check status",
        "tags": [
          "healthcheck"
        ],
        "summary": "health check",
        "operationId": "health check",
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/HealthCheckStatus"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the user",
        "tags": [
          "user"
        ],
        "operationId": "find user by id",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "description": "Update user with User ID supplied",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "deletes a single user based on the ID supplied",
        "tags": [
          "user"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "user deleted"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "HealthCheckStatus": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "maxLength": 256
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string",
          "maxLength": 256
        },
        "phone": {
          "type": "string",
          "format": "phone"
        },
        "username": {
          "type": "string",
          "maxLength": 256
        }
      }
    }
  },
  "tags": [
    {
      "description": "Operations about user",
      "name": "user"
    }
  ]
}`))
}
