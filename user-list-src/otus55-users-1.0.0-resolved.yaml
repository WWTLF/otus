---
swagger: "2.0"
info:
  title: "User Service"
  description: "This is simple client API\n"
  contact:
    email: "schetinnikov@gmail.com"
  version: "1.0.1"
tags:
- name: "user"
  description: "Operations about user"
paths:
  /metrics:
    get:
      tags:
        - instruments
      summary: "Prometheus metrics"
      produces:
      - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/Any"

  /health/liveness:
    get:
      tags:
        - "healthcheck"
      summary: "health check"
      description: "Active health check status"
      operationId: "health check"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HealthCheckStatus"
        default:
          description: "unexpected error"          
          schema:
            $ref: "#/definitions/Error"

  /health/readiness:
    get:
      tags:
        - "healthcheck"
      summary: "health check"
      description: "Active health check readiness status"
      operationId: "readiness health check"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HealthCheckStatus"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      consumes:
        - application/json
      operationId: "createUser"
      parameters:        
      - in: body
        name: body
        description: "Created user object"          
        schema:
          $ref: "#/definitions/User"
        required: true
      responses:
        "200":
          description: "user response"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /user/{userId}:
    get:
      tags:
      - "user"
      description: "Returns a user based on a single ID, if the user does not have\
        \ access to the user"
      operationId: "find user by id"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user"
        required: true                
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "user response"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "unexpected error"          
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "user"
      description: "Update user with User ID supplied"
      consumes:
        - application/json
      operationId: "updateUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user"
        required: true                
        type: "integer"
        format: "int64"
      - name: body
        in: body        
        description: "Created user object"          
        schema:
          $ref: "#/definitions/User"
        required: true     
      responses:
        "200":
          description: "user response"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "user"
      description: "deletes a single user based on the ID supplied"
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user"
        required: true                
        type: "integer"
        format: "int64"
      responses:
        "204":
          description: "user deleted"
        default:
          description: "unexpected error"          
          schema:
            $ref: "#/definitions/Error"
definitions:  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        maxLength: 256
        type: "string"
      firstName:
        maxLength: 256
        type: "string"
      lastName:
        maxLength: 256
        type: "string"
      email:      
        type: "string"
        format: "email"
      phone:
        type: "string"
        format: "phone"
  Error:
    required:
    - "code"
    - "message"
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"

  HealthCheckStatus:
    required:
      - "status"
    properties:      
      status:
        type: "string"
  Any:
    type: "object"

  
